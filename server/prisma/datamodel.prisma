## Schema involving Person and User types are likely going to change
## as we understand more about the production schema.

## Assume that User will have a string identifier passed from OKTA
## As well as a claims array containing a list of strings.

type User {
  id: ID! @id
  email: String! @unique
  info: Person @relation(link: INLINE)
}

type Program {
  id: ID! @id
  name: String! @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  products: [Product]!
  people: [Person!]!
}

type Product {
  id: ID! @id
  name: String! @unique
  program: Program!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  projects: [Project]!
}

type Project {
  id: ID! @id
  name: String! @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  start: String!
  end: String!
  product: Product!
  notes: [ProjectNote!]!
  projectRoles: [ProjectRole]!
}

## Ideally, the author field would return type Person, but
## there are limitations in the prisma API that prevent this
## from functioning correctly until Prisma 2 release
## See: https://github.com/prisma/prisma/issues/1907

type ProjectNote {
  id: ID! @id
  project: Project!
  author: String!
  meetingAttendees: [Person!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  title: String!
  content: String!
  performanceRating: Rating!
}

enum Rating {
  LOW
  MEDIUM
  HIGH
}

type Role {
  id: ID! @id
  title: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProjectRole {
  id: ID! @id
  person: Person!
  project: Project!
  role: Role!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProductRole {
  id: ID! @id
  person: Person!
  product: Product!
  role: Role!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProgramRole {
  id: ID! @id
  person: Person!
  program: Program!
  role: Role!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Person {
  id: ID! @id
  name: String!
  program: Program!
  githubId: String!
  slackId: String!
  avatarURL: String!
  timeZone: TimeZone!
  # meetingsAttended: [ProjectNote!]!
  user: User!
}

enum TimeZone {
  PST
  CST
  EST
}
